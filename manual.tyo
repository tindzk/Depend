.meta {
	.title{Jivai-Utils}
}

.chapter[Introduction] {
	.p {
		Jivai-Utils is a set of tools easing the development with Jivai.
	}

	.p {
		The  main   strength  is  its   build  system  which   resolves  all
		dependencies automatically.  It  is different  from GNU  Autoconf by
		eliminating the  need for  bootstrapping.  In contrast  to Autoconf,
		Jivai-Utils   does   not   rely   on   any   external  applications.
		Therefore, it runs much faster.
	}

	.p {
		Jivai-Utils enables  you to build  whole applications with  only one
		command!  They do not even need to use the Jivai library. As long as
		the dependencies are specified properly, it will work fine.
	}
}

.chapter[Features] {
	.list {
		.item{Prototype generator}
		.item{Dependency resolver}
		.item{Build system}
	}
}

.chapter[Getting Started] {
	.section[Requirements] {
		Jivai-Utils depends on Jivai. In this tutorial the Jivai
		repository is placed in the same directory as Jivai-Utils'.
	}

	.section[Installation] {
		.command {
			git clone git://github.com/tindzk/Jivai-Utils.git
			cd Jivai-Utils
			make
		}
	}

	.section[Usage] {
		.p {
			Let's try  to build the  httpd application from  the Jivai
			.path{examples/} directory:
		}

		.command {
			cd ../Jivai/examples
			mkdir -p build/Jivai
			../../Jivai-Utils/jutils.bin \
				build                    \
				output=build/httpd.bin   \
				main=httpd.c             \
				include=../src           \
				map=.:build              \
				map=../src:build/Jivai   \
				inclhdr=config.h         \
				link=@bfd                \
				dbgsym=yes               \
				optimlevel=0
		}
	}

	.section[Performance] {
		.p {
			In contrast  to the  shipped .path{Makefile},  this  will only  compile the
			files which are  actually needed.  If a file  changes,  it will only
			recompile those files which depend  on the changed one rendering the
			build process much faster.
		}

		.p {
			This  feature compares  the source  file's  date  with  the compiled
			output. Therefore, it's possible to "fake" a file change by doing:
		}

		.command {
			touch ../src/HTTP/Server.c
		}

		.p {
			And then execute the above .path{jutils.bin} command.  As you can see, only
			a subset of the initially built files get recompiled.
		}
	}

	.section[Dependency tree] {
		.p {
			Sometimes it's useful  to get an overview of  your project's overall
			complexity. Jivai-Utils supports printing the whole dependency tree.
			Just  replace  replace  the  .keyword{build}  with
			.keyword{deptree}  in  the above command.
		}
	}
}

.chapter[License] {
	.p {
		Licensed under the EUPL, Version 1.1 only (the
		.i{"Licence"}); You may not use this work except in
		compliance with the Licence.
	}

	.p {
		You may obtain a copy of the Licence at:

		.url[http://ec.europa.eu/idabc/eupl] {
			http://ec.europa.eu/idabc/eupl
		}
	}

	.p {
		Unless required by applicable law or agreed to in writing,
		software distributed under the Licence is distributed on an
		"AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
		either express or implied.
	}

	.p {
		See the Licence for the specific language governing
		permissions and limitations under the Licence.
	}
}

.chapter[See also] {
	.list {
		.item{.url[http://github.com/tindzk/Jivai-Utils]{Browse source}}
		.item{.url[http://github.com/tindzk]{GitHub account}}
	}
}

.chapter[Donate] {
	.url[http://flattr.com/thing/69459/Jivai-Utils-build-system-with-dependency-resolver] {
		.image {
			http://api.flattr.com/button/button-compact-static-100x17.png
		}
	}
}

.chapter[Contact] {
	.mail[tim.nieradzik@gmx.de]{Tim Nieradzik}
}
